# AUTOGENERATED! DO NOT EDIT! File to edit: 10_main.ipynb (unless otherwise specified).

__all__ = ['get_valid_api_keys', 'api_key_check', 'CohortBuilderSearchPayload', 'CohortBuilder', 'create_app']

# Cell
from .core import *
from fastapi import FastAPI, Header, HTTPException
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Dict
from datetime import datetime
from ast import literal_eval
from pathlib import Path
import os, json

# Cell
def get_valid_api_keys():
    "Return a list of keys that can be used to authorise users of this API"
    keys = os.environ.get('X_API_KEYS')
    assert keys is not None, 'Environment variable X_API_KEYS not set'
    return literal_eval(keys)

# Cell
def api_key_check(x_api_key):
    if x_api_key not in get_valid_api_keys():
        raise HTTPException(status_code=401, detail='Invalid x-api-key')

# Cell
class CohortBuilderSearchPayload(BaseModel):
    fhir_base: str
    age: int
#     diagnosis_label: str
    diagnosis_icd10: str
#     diagnosis_icd10_label: str
    medication_rxnorm: str
#     medication_rxnorm_label: str

# Cell
class CohortBuilder:
    def __init__(self, fhir_base):
        self.client = FhirClient(fhir_base)

    def search(self, age, diagnosis_icd10, medication_rxnorm):
        # TODO: use discharge date to calculate birthdate from age - for now we'll hard code
        discharge_year = 2014
        birth_year = discharge_year - age
        patient_resources = self.client.get_all_resources('Patient', {
            'birthdate': f'le{birth_year}-09-01', # 1996
            'gender': 'male,female'
        })
        encounter_resources = self.client.get_all_resources('Encounter', {
                'reason-code': diagnosis_icd10.replace(' ', ''), # TODO: not using below for now 'reason-code:below': 'I20,I21,I22,I23,I24,I25',
                'date': [f'ge{discharge_year}-09-01', f'le{discharge_year + 1}-09-30'], # TODO: Not sure this is filtering as we want ...
                'status': 'finished',
        #         'dischargeDisposition:not':'exp' # TODO: Do this client side for now
        })
        medication_rxnorm = medication_rxnorm.replace(' ', '')
        code = ','.join([f'http://www.nlm.nih.gov/research/umls/rxnorm|{n}' for n in medication_rxnorm.split(',')])
        print('rxnorm code', code)
        medication_administration_resources = self.client.get_all_resources('MedicationAdministration', {
                'status': 'completed',
        #         'effective-time': 'ge[Encounter-Start-Date]', # TODO: don't think this is possible via FHIR query
                'code': code})
        patient_ids = intersection_patient_ids(patient_resources, encounter_resources, medication_administration_resources)
        return {
            'fhir_base': self.client,
            'echo': (age, diagnosis_icd10, medication_rxnorm),
            'patient_ids': patient_ids
        }

# Cell
def create_app():
    app = FastAPI()
    app.mount('/static', StaticFiles(directory='static'), name='static')

    @app.get('/api-key-check')
    def _api_key_check(x_api_key: str = Header(None)):
        "Validates the `x-api-key` header parameter"
        api_key_check(x_api_key)
        return {'x-api-key': x_api_key, 'result': 'OK'}

    @app.options('/cohort_building_search/')
    def _translate_options(x_api_key: str = Header(None)):
        "Validate endpoint before invoking the actual POST method"
#         api_key_check(x_api_key)

    @app.post('/cohort_building_search/') # , response_model=Dict[str, str]
    def _cohort_building_search(payload: CohortBuilderSearchPayload, x_api_key: str=Header(None)):
        "TODO"
#         api_key_check(x_api_key)
        print('x_api_key', x_api_key)
        print(payload)
        cohort_builder = CohortBuilder(payload.fhir_base)
        return cohort_builder.search(payload.age, payload.diagnosis_icd10, payload.medication_rxnorm)

    return app